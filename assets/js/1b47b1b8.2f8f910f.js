"use strict";(self.webpackChunkgasps_docs=self.webpackChunkgasps_docs||[]).push([[596],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),c=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(u.Provider,{value:n},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),s=c(t),g=r,f=s["".concat(u,".").concat(g)]||s[g]||d[g]||i;return t?a.createElement(f,l(l({ref:n},p),{},{components:t})):a.createElement(f,l({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=g;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o[s]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3081:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const i={title:"Elements",sidebar_position:1},l="Adding interactive elements",o={unversionedId:"interaction/interactive-elements",id:"interaction/interactive-elements",title:"Elements",description:"Notifying the user",source:"@site/docs/rayfield/interaction/interactive-elements.md",sourceDirName:"interaction",slug:"/interaction/interactive-elements",permalink:"/rayfield/interaction/interactive-elements",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Elements",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Windows",permalink:"/rayfield/configuration/windows"},next:{title:"Binds",permalink:"/rayfield/interaction/keybinds"}},u={},c=[{value:"Notifying the user",id:"notifying-the-user",level:2},{value:"Creating a Button",id:"creating-a-button",level:2},{value:"Updating a Button",id:"updating-a-button",level:3},{value:"Creating a Toggle",id:"creating-a-toggle",level:2},{value:"Updating a Toggle",id:"updating-a-toggle",level:3},{value:"Creating a Color Picker",id:"creating-a-color-picker",level:2},{value:"Updating a Color Picker",id:"updating-a-color-picker",level:3},{value:"Creating a Slider",id:"creating-a-slider",level:2},{value:"Updating a Slider",id:"updating-a-slider",level:3},{value:"Creating an Adaptive Input (TextBox)",id:"creating-an-adaptive-input-textbox",level:2},{value:"Creating a Dropdown menu",id:"creating-a-dropdown-menu",level:2},{value:"Updating a Dropdown",id:"updating-a-dropdown",level:3},{value:"Check the value of an existing element",id:"check-the-value-of-an-existing-element",level:2}],p={toc:c},s="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(s,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"adding-interactive-elements"},"Adding interactive elements"),(0,r.kt)("h2",{id:"notifying-the-user"},"Notifying the user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Rayfield:Notify({\n   Title = "Notification Title",\n   Content = "Notification Content",\n   Duration = 6.5,\n   Image = 4483362458,\n   Actions = { -- Notification Buttons\n      Ignore = {\n         Name = "Okay!",\n         Callback = function()\n         print("The user tapped Okay!")\n      end\n   },\n},\n})\n')),(0,r.kt)("h2",{id:"creating-a-button"},"Creating a Button"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local Button = Tab:CreateButton({\n   Name = "Button Example",\n   Callback = function()\n   -- The function that takes place when the button is pressed\n   end,\n})\n')),(0,r.kt)("h3",{id:"updating-a-button"},"Updating a Button"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Button:Set("Button Example")\n')),(0,r.kt)("h2",{id:"creating-a-toggle"},"Creating a Toggle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local Toggle = Tab:CreateToggle({\n   Name = "Toggle Example",\n   CurrentValue = false,\n   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n   Callback = function(Value)\n   -- The function that takes place when the toggle is pressed\n   -- The variable (Value) is a boolean on whether the toggle is true or false\n   end,\n})\n')),(0,r.kt)("h3",{id:"updating-a-toggle"},"Updating a Toggle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Toggle:Set(false)\n")),(0,r.kt)("h2",{id:"creating-a-color-picker"},"Creating a Color Picker"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local ColorPicker = Tab:CreateColorPicker({\n    Name = "Color Picker",\n    Color = Color3.fromRGB(255,255,255),\n    Flag = "ColorPicker1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n    Callback = function(Value)\n        -- The function that takes place every time the color picker is moved/changed\n        -- The variable (Value) is a Color3fromRGB value based on which color is selected\n    end\n})\n')),(0,r.kt)("h3",{id:"updating-a-color-picker"},"Updating a Color Picker"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"ColorPicker:Set(Color3.fromRGB(255,255,255)\n")),(0,r.kt)("h2",{id:"creating-a-slider"},"Creating a Slider"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local Slider = Tab:CreateSlider({\n   Name = "Slider Example",\n   Range = {0, 100},\n   Increment = 10,\n   Suffix = "Bananas",\n   CurrentValue = 10,\n   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n   Callback = function(Value)\n   -- The function that takes place when the slider changes\n   -- The variable (Value) is a number which correlates to the value the slider is currently at\n   end,\n})\n')),(0,r.kt)("h3",{id:"updating-a-slider"},"Updating a Slider"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"Slider:Set(10) -- The new slider integer value\n")),(0,r.kt)("h2",{id:"creating-an-adaptive-input-textbox"},"Creating an Adaptive Input (TextBox)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local Input = Tab:CreateInput({\n   Name = "Input Example",\n   PlaceholderText = "Input Placeholder",\n   RemoveTextAfterFocusLost = false,\n   Callback = function(Text)\n   -- The function that takes place when the input is changed\n   -- The variable (Text) is a string for the value in the text box\n   end,\n})\n')),(0,r.kt)("h2",{id:"creating-a-dropdown-menu"},"Creating a Dropdown menu"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'local Dropdown = Tab:CreateDropdown({\n   Name = "Dropdown Example",\n   Options = {"Option 1","Option 2"},\n   CurrentOption = {"Option 1"},\n   MultipleOptions = false,\n   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you\'re using configuration saving to ensure no overlaps\n   Callback = function(Option)\n   -- The function that takes place when the selected option is changed\n   -- The variable (Option) is a table of strings for the current selected options\n   end,\n})\n')),(0,r.kt)("h3",{id:"updating-a-dropdown"},"Updating a Dropdown"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'Dropdown:Set({"Option 2"}) -- The new list of options\n')),(0,r.kt)("h2",{id:"check-the-value-of-an-existing-element"},"Check the value of an existing element"),(0,r.kt)("p",null,"To check the current value of an existing element, using the variable, you can do ",(0,r.kt)("inlineCode",{parentName:"p"},"ElementName.CurrentValue"),", if it's a keybind or dropdown, you will need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"KeybindName.CurrentKeybind")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"DropdownName.CurrentOption"),"\nYou can also check it via the flags from ",(0,r.kt)("inlineCode",{parentName:"p"},"Rayfield.Flags")))}d.isMDXComponent=!0}}]);